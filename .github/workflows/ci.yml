name: ci
on: [push]
permissions:
  contents: write
jobs:
  analysis-documentation:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_doc
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Generate Documentation
        run: |
          export THREADS="1"
          ./ci/analysis-documentation.sh
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-documentation
          path: |
            doc/build/html
            doc/build/doxygen
  build-linux-gcc-c:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          export CC="gcc"
          export CXX="g++"
          export CFLAGS="-Wall -funroll-loops"
          export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=OFF -DFMDT_LSL_LINK=OFF -DFMDT_USE_VCIO=OFF"
          export NAME="build_linux_gcc_c"
          source ./ci/tools/threads.sh
          ./ci/build-linux-macos.sh
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-gcc-c
          path: build_linux_gcc_c/
  build-linux-gcc:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          export CC="gcc"
          export CXX="g++"
          export CFLAGS="-Wall -funroll-loops -msse4.2"
          export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_LSL_LINK=OFF -DFMDT_USE_VCIO=OFF"
          export NAME="build_linux_gcc"
          source ./ci/tools/threads.sh
          ./ci/build-linux-macos.sh
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-gcc
          path: build_linux_gcc/
  build-linux-gcc-test-regression-coverage:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build & Run Regression Tests & Code Coverage
        run: |
          export CC="gcc"
          export CXX="g++"
          export CFLAGS="-Wall -funroll-loops -msse4.2 --coverage"
          export LFLAGS="--coverage"
          export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_OPENCV_LINK=ON -DFMDT_LSL_LINK=OFF -DFMDT_USE_VCIO=OFF"
          source ./ci/tools/threads.sh
          ./ci/build-linux-macos.sh
          LSLM=OFF ./ci/test-regression.sh
          ./ci/coverage-linux.sh
          rm -rf build/bin
          rm -rf build/lib
          tar -zcvf fmdt_outputs.tar.gz scripts/regression/output*
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-gcc-test-regression-coverage
          path: |
            code_coverage_report/
            fmdt_outputs.tar.gz
  build-linux-clang:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          export CC="clang"
          export CXX="clang++"
          export CFLAGS="-Wall -funroll-loops"
          export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_LSL_LINK=OFF -DFMDT_USE_VCIO=OFF"
          export NAME="build_linux_clang"
          source ./ci/tools/threads.sh
          ./ci/build-linux-macos.sh
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-clang
          path: build_linux_clang/
  build-linux-clang-c:
    runs-on: ubuntu-latest
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        run: |
          export CC="clang"
          export CXX="clang++"
          export CFLAGS="-Wall -funroll-loops"
          export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=OFF -DFMDT_LSL_LINK=OFF -DFMDT_USE_VCIO=OFF"
          export NAME="build_linux_clang_c"
          source ./ci/tools/threads.sh
          ./ci/build-linux-macos.sh
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-clang-c
          path: build_linux_clang_c/
  test-regression-c:
    runs-on: ubuntu-latest
    needs: [build-linux-gcc-c]
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux-gcc-c
          path: build_linux_gcc_c.tar.gz
      - name: Run Regression Tests
        run: |
          tar -xvvf build_linux_gcc_c.tar.gz
          mkdir build
          mkdir build/bin
          mv build_linux_gcc_c/* build/bin
          ./ci/test-regression.sh
          tar -zcvf fmdt_outputs.tar.gz scripts/regression/output*
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-regression-c
          path: fmdt_outputs.tar.gz
  test-memory-c:
    runs-on: ubuntu-latest
    needs: [build-linux-gcc-c, build-linux-clang-c]
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_valgrind
    steps:
      - name: Download Artifacts GCC
        uses: actions/download-artifact@v4
        with:
          name: build-linux-gcc-c
          path: build_linux_gcc_c/
      - name: Download Artifacts Clang
        uses: actions/download-artifact@v4
        with:
          name: build-linux-clang-c
          path: build_linux_clang_c/
      - name: Memcheck
        run: |
          mkdir build_gcc
          mkdir build_gcc/bin
          mv build_linux_gcc_c/* build_gcc/bin
          mkdir build_clang
          mkdir build_clang/bin
          mv build_linux_clang_c/* build_clang/bin
          ./ci/test-memory.sh build_gcc build_clang
        shell: bash
  test-memory:
    runs-on: ubuntu-latest
    needs: [build-linux-gcc, build-linux-clang]
    container: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_valgrind
    steps:
      - name: Download Artifacts GCC
        uses: actions/download-artifact@v4
        with:
          name: build-linux-gcc
          path: build_linux_gcc/
      - name: Download Artifacts Clang
        uses: actions/download-artifact@v4
        with:
          name: build-linux-clang
          path: build_linux_clang/
      - name: Memcheck
        run: |
          mkdir build_gcc
          mkdir build_gcc/bin
          mv build_linux_gcc/* build_gcc/bin
          mkdir build_clang
          mkdir build_clang/bin
          mv build_linux_clang/* build_clang/bin
          ./ci/test-memory.sh build_gcc build_clang
        shell: bash
  coverage:
    runs-on: ubuntu-latest
    needs: [build-linux-gcc-test-regression-coverage]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux-gcc-test-regression-coverage
          path: build/
      - name: Produce the Coverage Report
        uses: insightsengineering/coverage-action@v2
        with:
          # Path to the Cobertura XML report.
          path: ./build/code_coverage_report/aff3ct-core.xml
          # Minimum total coverage, if you want to the
          # workflow to enforce it as a standard.
          # This has no effect if the `fail` arg is set to `false`.
          threshold: 65.000
          # Fail the workflow if the minimum code coverage
          # reuqirements are not satisfied.
          fail: true
          # Publish the rendered output as a PR comment
          publish: true
          # Create a coverage diff report.
          diff: true
          # Branch to diff against.
          # Compare the current coverage to the coverage
          # determined on this branch.
          diff-branch: master
          # This is where the coverage reports for the
          # `diff-branch` are stored.
          # Branch is created if it doesn't already exist'.
          diff-storage: _xml_coverage_reports
          # A custom title that can be added to the code
          # coverage summary in the PR comment.
          coverage-summary-title: "Code Coverage Summary"
