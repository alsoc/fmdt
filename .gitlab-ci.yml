variables:
  GIT_SUBMODULE_STRATEGY: none

stages:
  - analysis
  - build
  - test
  - coverage
  - deploy

before_script:
  - hostname
  - whoami
# - pwd

analysis-documentation:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_doc
  stage: analysis
  allow_failure: true
  artifacts:
    name: analysis-documentation
    when: always
    paths:
      - doc/build/html
#     - doc/build/latex
      - doc/build/doxygen
  tags:
    - x86_64
    - linux
    - docker
  script:
    - export THREADS="1"
    - ./ci/analysis-documentation.sh

build-linux-gcc-c:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  tags:
    - linux
    - docker
  artifacts:
    name: build-linux-gcc-c
    paths:
      - build_linux_gcc_c.tar.gz
  script:
    - export CC="gcc"
    - export CXX="g++"
    - export CFLAGS="-Wall -funroll-loops"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=OFF -DFMDT_LSL_LINK=ON -DFMDT_USE_VCIO=ON"
    - export NAME="build_linux_gcc_c"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - tar -zcvf build_linux_gcc_c.tar.gz build_linux_gcc_c

build-linux-gcc:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    name: build-linux-gcc
    paths:
      - build_linux_gcc.tar.gz
  script:
    - export CC="gcc"
    - export CXX="g++"
    - export CFLAGS="-Wall -funroll-loops -msse4.2"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_LSL_LINK=ON -DFMDT_USE_VCIO=ON"
    - export NAME="build_linux_gcc"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - tar -zcvf build_linux_gcc.tar.gz build_linux_gcc

build-linux-gcc-coverage:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    name: build
    paths:
      - build.tar.gz
  script:
    - export CC="gcc"
    - export CXX="g++"
    - export CFLAGS="-Wall -funroll-loops -msse4.2 --coverage"
    - export LFLAGS="--coverage"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_OPENCV_LINK=ON -DFMDT_LSL_LINK=ON -DFMDT_USE_VCIO=ON"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - rm -rf build/lib
    - tar -zcvf build.tar.gz build

build-linux-clang:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    name: build-linux-clang
    paths:
      - build_linux_clang.tar.gz
  script:
    - export CC="clang"
    - export CXX="clang++"
    - export CFLAGS="-Wall -funroll-loops"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_LSL_LINK=ON -DFMDT_USE_VCIO=ON"
    - export NAME="build_linux_clang"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - tar -zcvf build_linux_clang.tar.gz build_linux_clang

build-linux-clang-debug:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    name: build-linux-clang-debug
    paths:
      - build_linux_clang_debug.tar.gz
  script:
    - export CC="clang"
    - export CXX="clang++"
    - export CFLAGS="-Wall -funroll-loops"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_DEBUG=ON -DFMDT_LSL_LINK=OFF -DFMDT_USE_VCIO=ON"
    - export NAME="build_linux_clang_debug"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - tar -zcvf build_linux_clang_debug.tar.gz build_linux_clang_debug

build-linux-clang-c:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    name: build-linux-clang-c
    paths:
      - build_linux_clang_c.tar.gz
  script:
    - export CC="clang"
    - export CXX="clang++"
    - export CFLAGS="-Wall -funroll-loops"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=OFF -DFMDT_LSL_LINK=ON -DFMDT_USE_VCIO=ON"
    - export NAME="build_linux_clang_c"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - tar -zcvf build_linux_clang_c.tar.gz build_linux_clang_c

build-linux-icpc:
  image: intel/oneapi-hpckit
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  tags:
    - x86_64
    - linux
    - docker
  artifacts:
    name: build-linux-icpc
    paths:
      - build_linux_icpc.tar.gz
  script:
    - export CC="icc"
    - export CXX="icpc"
    - export CFLAGS="-Wall -funroll-loops -march=native -std=c++11"
    - export CMAKE_OPT="-DFMDT_AFF3CT_RUNTIME=ON -DFMDT_LSL_LINK=ON -DFMDT_USE_VCIO=ON"
    - export NAME="build_linux_icpc"
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - tar -zcvf build_linux_icpc.tar.gz build_linux_icpc

test-regression-c:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  needs:
    - job: build-linux-gcc-c
      artifacts: true
  tags:
    - x86_64
    - sse4.2
    - linux
    - docker
  artifacts:
    name: build
    when: always
    paths:
      - fmdt_outputs.tar.gz
  script:
    - tar -xvvf build_linux_gcc_c.tar.gz
    - mkdir build
    - mkdir build/bin
    - mv build_linux_gcc_c/* build/bin
    - ./ci/test-regression.sh
    - tar -zcvf fmdt_outputs.tar.gz scripts/regression/output*

test-regression:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  needs:
    - job: build-linux-gcc-coverage
      artifacts: true
  tags:
    - x86_64
    - sse4.2
    - linux
    - docker
  artifacts:
    name: build
    when: always
    paths:
      - build.tar.gz
      - fmdt_outputs.tar.gz
  script:
    - tar -xvvf build.tar.gz
    - ./ci/test-regression.sh
    - rm -rf build/bin
    - rm -rf build/lib
    - tar -zcvf build.tar.gz build
    - tar -zcvf fmdt_outputs.tar.gz scripts/regression/output*

test-memory-c:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_valgrind
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  needs:
    - job: build-linux-gcc-c
      artifacts: true
    - job: build-linux-clang-c
      artifacts: true
  tags:
    - x86_64
    - sse4.2
    - linux
    - docker
  script:
    - tar -xvvf build_linux_gcc_c.tar.gz
    - mkdir build_gcc
    - mkdir build_gcc/bin
    - mv build_linux_gcc_c/* build_gcc/bin
    - tar -xvvf build_linux_clang_c.tar.gz
    - mkdir build_clang
    - mkdir build_clang/bin
    - mv build_linux_clang_c/* build_clang/bin
    - ./ci/test-memory.sh build_gcc build_clang

test-memory:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_valgrind
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
    - schedules
  needs:
    - job: build-linux-gcc
      artifacts: true
    - job: build-linux-clang
      artifacts: true
  tags:
    - x86_64
    - sse4.2
    - linux
    - docker
  script:
    - tar -xvvf build_linux_gcc.tar.gz
    - mkdir build_gcc
    - mkdir build_gcc/bin
    - mv build_linux_gcc/* build_gcc/bin
    - tar -xvvf build_linux_clang.tar.gz
    - mkdir build_clang
    - mkdir build_clang/bin
    - mv build_linux_clang/* build_clang/bin
    - ./ci/test-memory.sh build_gcc build_clang

coverage-linux:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
  stage: coverage
  except:
    - schedules
  needs:
    - job: test-regression
      artifacts: true
  tags:
    - x86_64
    - linux
    - docker
  coverage: '/.*lines\.*: (\d+.\d+\%)/'
  artifacts:
     name: code-coverage-report
     when: always
     paths:
       - code_coverage_report/
  script:
    - tar -xvvf build.tar.gz
    - ./ci/coverage-linux.sh

pages:
  stage: deploy
  except:
    - schedules
  tags:
    - linux
  dependencies:
    - coverage-linux
  allow_failure: true
  script:
    - mv code_coverage_report/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - develop
