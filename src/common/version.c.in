#include <stdio.h>
#include <string.h>

#include "fmdt/version.h"

char g_fmdt_sha1[256] = "@GIT_SHA1@";
char g_fmdt_version[256] = "@GIT_VERSION@";
unsigned g_fmdt_version_major = @FMDT_VERSION_MAJOR@;
unsigned g_fmdt_version_minor = @FMDT_VERSION_MINOR@;
unsigned g_fmdt_version_patch = @FMDT_VERSION_PATCH@;
unsigned g_fmdt_build = @FMDT_BUILD@;

void version_print(const char* bin_name) {
    char os[256] = "", compiler[256] = "", compiler_version[256] = "";

#if defined(_WIN64) || defined(_WIN32) || defined(WIN32) || defined(__MINGW32__)
    snprintf(os, sizeof(os), "Windows");
#elif defined(__linux__) || defined(__linux)
    snprintf(os, sizeof(os), "Linux");
#elif defined(__APPLE__)
    snprintf(os, sizeof(os), "macOS");
#else
    snprintf(os, sizeof(os), "Unknown OS");
#endif

#if defined(__INTEL_COMPILER) || defined(__ICL) || defined(__ICC)
#if defined(__cplusplus)
    snprintf(compiler, sizeof(compiler), "icpc");
#else
    snprintf(compiler, sizeof(compiler), "icc");
#endif
#if defined(__INTEL_COMPILER)
    snprintf(compiler_version, sizeof(compiler_version), "%d", __INTEL_COMPILER);
#elif defined(__ICL)
    snprintf(compiler_version, sizeof(compiler_version), "%d", __ICL);
#else
    snprintf(compiler_version, sizeof(compiler_version), "%d", __ICC);
#endif
    //compiler_version = compiler_version.substr(0,2) + "." + compiler_version.substr(2,compiler_version.size());
#elif defined(__clang__) || defined(__llvm__)
#if defined(__cplusplus)
    snprintf(compiler, sizeof(compiler), "clang++");
#else
    snprintf(compiler, sizeof(compiler), "clang");
#endif
    snprintf(compiler_version, sizeof(compiler_version),  "%d.%d.%d", __clang_major__, __clang_minor__,
    __clang_patchlevel__);
#elif defined(__GNUG__) || (defined(__GNUC__) && defined(__cplusplus))
#if defined(__cplusplus)
    snprintf(compiler, sizeof(compiler), "g++");
#else
    snprintf(compiler, sizeof(compiler), "gcc");
#endif
    snprintf(compiler_version, sizeof(compiler_version),  "%d.%d.%d", __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);
#elif defined(_MSC_VER)
    snprintf(compiler, sizeof(compiler), "MSVC");
    snprintf(compiler_version, sizeof(compiler_version), "%d", _MSC_VER);
#else
    snprintf(compiler, sizeof(compiler), "Unknown compiler");
#endif

#if defined(FMDT_DEBUG)
    char opt_debug[256] = "on";
#else
    char opt_debug[256] = "off";
#endif

#if defined(FMDT_OPENCV_LINK)
    char opt_opencv_link[256] = "on";
#else
    char opt_opencv_link[256] = "off";
#endif

#if defined(FMDT_AFF3CT_LINK)
    char opt_aff3ct[256] = "on";
#else
    char opt_aff3ct[256] = "off";
#endif

#if defined(FMDT_LSL_LINK)
    char opt_flsl[256] = "on";
#else
    char opt_flsl[256] = "off";
#endif

#if defined(FMDT_LSL_NEW_INTERFACE)
 char opt_flsl_new_interface[256] = "on";
#else
 char opt_flsl_new_interface[256] = "off";
#endif

#if defined(FMDT_USE_FFMPEG_IO)
    char opt_ffio_io[256] = "on";
#else
    char opt_ffio_io[256] = "off";
#endif

#if defined(FMDT_USE_VCIO)
    char opt_vcio_io[256] = "on";
#else
    char opt_vcio_io[256] = "off";
#endif

    if (strnlen(g_fmdt_version, sizeof(g_fmdt_version))) {
        char hash8[sizeof(g_fmdt_sha1)];
        strncpy(hash8, g_fmdt_sha1, sizeof(hash8));
        hash8[8] = '\0';
        printf("fmdt-%s (system: %s, compiler: %s-%s) %s (%s)\n", bin_name, os, compiler, compiler_version,
               g_fmdt_version, hash8);
    } else
        printf("fmdt-%s (system: %s, compiler: %s-%s)\n", bin_name, os, compiler, compiler_version);

    printf("Compilation options:\n");
    printf("  - Debug mode:           %s\n", opt_debug);
    printf("  - Link with OpenCV:     %s\n", opt_opencv_link);
    printf("  - Link with AFF3CT:     %s\n", opt_aff3ct);
    printf("  - Link with FLSL:       %s\n", opt_flsl);
    printf("  - FLSL new interface:   %s\n", opt_flsl_new_interface);
    printf("  - Link with ffmpeg-io:  %s\n", opt_ffio_io);
    printf("  - Link with vcodecs-io: %s\n", opt_vcio_io);
    printf("Copyright (c) 2022-2024 - MIT license.\n");
    printf("This is free software; see the source for copying conditions.  There is NO\n");
    printf("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n");
}
